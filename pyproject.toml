[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "readyplayerme.meshops"
dynamic = ["version"]
description = "This package provides means to help with mesh processing and some texture related operations, like UV seam mitigation."
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = [
  "ready player me",
  "gltf",
  "3D",
  "mesh",
  "texture",
  "texture mapping",
  "uv mapping",
  "uv",
  "uv seam",
  "uv border",
]
authors = [
  { name = "Ready Player Me", email = "info@readyplayer.me" },
  { name = "Olaf Haag", email = "olaf@readyplayer.me" },
  { name = "Daniel-Ionut Rancea" },
]
maintainers = [{ name = "Olaf Haag", email = "olaf@readyplayer.me" }]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Multimedia :: Graphics",
  "Topic :: Multimedia :: Graphics :: 3D Modeling",
]
# trimesh up to v4.3.2 has an error with numpy 2.0 ptp during mesh load.
dependencies = ["numpy>=1.20.0,<2.0.0", "trimesh[recommend]>=4.0.1", "pillow", "scipy"]

[project.optional-dependencies]
dev = ["pre-commit"]

[project.urls]
Documentation = "https://github.com/readyplayerme/meshops#readme"
Issues = "https://github.com/readyplayerme/meshops/issues"
Source = "https://github.com/readyplayerme/meshops"

[tool.hatch.version]
path = "src/readyplayerme/meshops/__about__.py"

[tool.hatch.build]
sources = ["src"]
packages = ["src/readyplayerme"]

[tool.hatch.envs.default]
installer = "uv"
description = "Python virtual environment in project dir to quickly get up and running in an IDE like VSCode."
type = "virtual"
features = ["dev"]
post-install-commands = ["install-precommit"]

[tool.hatch.envs.default.scripts]
install-precommit = "pre-commit install --overwrite -t pre-commit -t commit-msg -t pre-push"

[tool.hatch.envs.hatch-test]
extra-dependencies = ["pyinstrument"]
randomize = true
parallel = true
retries = 2
retry-delay = 1

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.12", "3.11", "3.10"]

[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
cov-combine = "coverage combine"
cov-html = "coverage html -d ./tests/.coverage"
cov-report = ["coverage report", "cov-html"]

[tool.hatch.envs.hatch-test.extra-scripts]
pip = "{env:HATCH_UV} pip {args}"

[tool.hatch.envs.hatch-static-analysis]
dependencies = ["ruff==0.4.4"]
# Disable the hatch's default config and use the one from the project.
config-path = "none"

[tool.hatch.envs.types]
extra-dependencies = ["mypy==1.10.0", "pytest"]
installer = "uv"
post-install-commands = []

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/readyplayerme/meshops tests}"

# Workaround for mypy using pip instead of uv, to avoid "pip not found" error.
[[tool.hatch.envs.types.matrix]]
tool = ["uv"]

[tool.hatch.envs.types.overrides]
matrix.tool.installer = { value = "{matrix:tool}" }
matrix.tool.scripts = [
  { key = "pip", value = "{env:HATCH_UV} pip {args}", if = ["uv"] },
]

[tool.ruff]
line-length = 120
builtins = ["_"]

[tool.ruff.lint]
select = [
  "A",
  "ANN",
  "ARG",
  "B",
  "C",
  "D",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "T20",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow unused arguments
  "ARG002",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Allow try-except-pass & try-except-continue
  "S110",
  "S112",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Exclude self, cls, args, kwargs from annotation, allow dynamically typed expressions (typing.Any) in type annotations
  "ANN101",
  "ANN102",
  "ANN002",
  "ANN003",
  "ANN401",
  # Don't require documentation for every function parameter and magic methods.
  "D417",
  "D102",
  "D105",
  "D107",
  "D100",
  # hatch recommends to ignore implicitly concatenated strings on a single line to avoid conflicts with the formatter.
  "ISC001",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

[tool.ruff.lint.isort]
known-first-party = ["readyplayerme"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
allow-star-arg-any = true
ignore-fully-untyped = true
suppress-none-returning = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
plugins = ["numpy.typing.mypy_plugin"]

[[tool.mypy.overrides]]
module = "readyplayerme.*"
ignore_missing_imports = true

# for strict mypy:
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "trimesh.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pyinstrument.*"
ignore_missing_imports = true

[tool.coverage.run]
source_pkgs = ["readyplayerme", "readyplayerme.meshops"]
branch = true
parallel = true
omit = ["src/readyplayerme/*/__about__.py"]

[tool.coverage.paths]
coverage_debugging = ["src/readyplayerme", "*/meshops/src/readyplayerme"]

[tool.coverage.report]
include_namespace_packages = true
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
